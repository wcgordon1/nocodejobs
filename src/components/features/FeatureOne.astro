---
import { Code } from "astro/components";
// Define the features data
const features = [
  {
    title: "Mobile Development",
    description:
      "FlutterFlow experts building cross-platform mobile apps visually.",
  },
  {
    title: "Automation",
    description: "Zapier specialists creating complex workflow automations.",
  },
];
---
<section class="relative overflow-hidden bg-white">
  <div class="bg-purple-900 max-w-7xl mx-auto rounded-3xl">
    <div class="mx-auto max-w-7xl lg:px-16 md:px-12 px-8 xl:px-24 py-24">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-12 lg:gap-24 items-start">
        <div>
          <span class="text-sm font-medium text-slate-300 tracking-wide uppercase"
            >No Code Development</span
          >
          <h2
            class="text-white font-semibold tracking-tight lg:text-5xl mt-6 text-3xl">
            Modern No Code Platforms
          </h2>
          <p class="text-slate-300 mt-5 text-balance">
            Today's no code platforms enable rapid development of sophisticated applications.
            From mobile apps to complex automations, no code developers combine visual development
            with technical expertise.
            <br />
            <br />
            Each platform requires deep understanding of its capabilities, best practices
            and integration patterns.
          </p>
          <ul
            role="list"
            class="grid grid-cols-2 gap-4 list-none lg:gap-6 mt-12">
            {
              features.map((feature) => (
                <li>
                  <p class="font-semibold text-white text-base">
                    {feature.title}
                  </p>
                  <div class="mt-2 text-slate-400 text-sm">
                    {feature.description}
                  </div>
                </li>
              ))
            }
          </ul>
        </div>
        <div class="lg:mt-0 mt-12 h-full">
          <div
            x-data="{
        tabSelected: 1,
        tabId: $id('tabs'),
        tabButtonClicked(tabButton){
            this.tabSelected = tabButton.id.replace(this.tabId + '-', '');
            this.tabRepositionMarker(tabButton);
        },
        tabRepositionMarker(tabButton){
            this.$refs.tabMarker.style.width=tabButton.offsetWidth + 'px';
            this.$refs.tabMarker.style.height=tabButton.offsetHeight + 'px';
            this.$refs.tabMarker.style.left=tabButton.offsetLeft + 'px';
        },
        tabContentActive(tabContent){
            return this.tabSelected == tabContent.id.replace(this.tabId + '-content-', '');
        }
    }"
            x-init="tabRepositionMarker($refs.tabButtons.firstElementChild);"
            class="relative lg:rounded-3xl lg:p-10 text-white">
            <div
              x-ref="tabButtons"
              class="relative inline-grid items-center justify-center w-full h-10 grid-cols-2 p-1 bg-purple-900 border border-white/20 rounded-full select-none">
              <button
                :id="$id(tabId)"
                @click="tabButtonClicked($el);"
                type="button"
                class="relative z-20 inline-flex items-center justify-center w-full h-8 px-3 text-sm font-medium transition-all rounded-full cursor-pointer whitespace-nowrap"
                >FlutterFlow</button
              >
              <button
                :id="$id(tabId)"
                @click="tabButtonClicked($el);"
                type="button"
                class="relative z-20 inline-flex items-center justify-center w-full h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap"
                >Zapier</button
              >
              <div
                x-ref="tabMarker"
                class="absolute left-0 z-10 w-1/2 h-full duration-300 ease-out"
                x-cloak>
                <div class="w-full h-full bg-white/10 rounded-full shadow-sm">
                </div>
              </div>
            </div>
            <div class="relative w-full mt-2 content">
              <div
                :id="$id(tabId + '-content')"
                x-show="tabContentActive($el)"
                class="relative">
                <section
                  class="text-xs font-mono shadow-3xl mt-4 rounded-2xl overflowhidden h-full bg-[#14162a] p-4">
                  <Code
                    code={`// FlutterFlow Developer Skills

class FlutterFlowExpertise {
  final Map<String, List<String>> visualDevelopment = {
    'ui_design': ['Responsive Layouts', 'Custom Widgets', 'Animations'],
    'state_management': ['MobX', 'Provider', 'Riverpod'],
    'backend': ['Firebase', 'Supabase', 'REST APIs']
  };

  final Map<String, dynamic> customCode = {
    'languages': ['Dart', 'JavaScript'],
    'custom_functions': ['Actions', 'Computed Values', 'Custom Widgets'],
    'integrations': ['Authentication', 'Payments', 'Storage']
  };

  List<String> requiredSkills = [
    'Flutter Fundamentals',
    'Visual Programming',
    'State Management',
    'API Integration',
    'Custom Code Extensions'
  ];

  // Core Development Areas
  void buildResponsiveApps() {
    // Design system implementation
    // Component architecture
    // Cross-platform optimization
  }
}`}
                    lang="dart"
                    theme="css-variables"
                  />
                </section>
              </div>
              <div
                :id="$id(tabId + '-content')"
                x-show="tabContentActive($el)"
                class="relative"
                x-cloak>
                <section
                  class="text-xs font-mono mt-4 rounded-3xl shadow-2xl overflow-hidden h-full bg-[#14162a] p-4">
                  <Code
                    code={`# Zapier Integration Development

class ZapierExpertise:
    def __init__(self):
        self.automation_skills = {
            'workflow_design': [
                'Multi-step Zaps',
                'Conditional Logic',
                'Nested Workflows'
            ],
            'integrations': {
                'apis': ['REST', 'GraphQL', 'Webhooks'],
                'platforms': ['CRM', 'Marketing', 'Databases']
            },
            'custom_development': [
                'Python Scripts',
                'Code Steps',
                'API Creation'
            ]
        }
        
        self.core_competencies = [
            'API Understanding',
            'Data Transformation',
            'Error Handling',
            'Testing & Monitoring'
        ]

    def build_enterprise_workflows(self):
        """
        Enterprise automation capabilities:
        - Complex data mappings
        - Multi-app orchestration
        - Error recovery patterns
        """
        pass

# Required Tools
tools = [
    'Zapier Platform CLI',
    'REST API Tools',
    'Version Control'
]`}
                    lang="python"
                    theme="css-variables"
                  />
                </section>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
