---
import { getCollection } from "astro:content";

const allJobs = await getCollection("jobs");

// Get unique teams and categories
const teams = [...new Set(allJobs.map(job => job.data.team))].sort();
const categories = [...new Set(allJobs.map(job => job.data.occupationalCategory))].sort();
---

<div class="lg:sticky lg:top-8">
  <div class="bg-slate-50 rounded-3xl p-4 lg:p-6">
    <!-- Salary Sort -->
    <div class="pl-3">
      <h3 class="ttext-base font-medium text-purple-900 mb-2">Pay</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        <label class="flex items-center space-x-2">
          <input 
            type="radio" 
            name="salary-sort" 
            value="high-low" 
            class="text-blue-600 focus:ring-blue-500 size-3"
          >
          <span class="text-slate-500 text-sm">Highest to Lowest</span>
        </label>
        <label class="flex items-center space-x-2">
          <input 
            type="radio" 
            name="salary-sort" 
            value="low-high" 
            class="text-blue-600 focus:ring-blue-500 size-3"
          >
          <span class="text-slate-500 text-sm">Lowest to Highest</span>
        </label>
      </div>
    </div>

    <!-- Teams Filter -->
    <div class="pl-3">
      <h3 class="text-base font-medium text-purple-900 mt-2 mb-2">Setting</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        {teams.map((team) => (
          <label class="flex items-center space-x-2">
            <input 
              type="radio" 
              name="team-filter" 
              value={team.toString()} 
              class="text-blue-600 focus:ring-blue-500 size-3"
            >
            <span class="text-slate-500 text-sm">{team}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Categories Filter -->
    <div class="pl-3">
      <h3 class="text-base font-medium text-purple-900 mt-2 mb-2">Platform</h3>
      <div class="flex lg:flex-col flex-wrap gap-3 lg:gap-1">
        {categories.map((category) => (
          <label class="flex items-center space-x-2">
            <input 
              type="radio" 
              name="category-filter" 
              value={category.toString()} 
              class="text-blue-600 focus:ring-blue-500 size-3"
            >
            <span class="text-slate-500 text-sm">{category}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Reset Button -->
    <button
      id="resetFilters"
      class="w-full text-white bg-blue-500 hover:bg-blue-600 font-medium py-2 rounded-full mt-6"
    >
      Reset Filters
    </button>
  </div>
</div>

<script>
  interface Filters {
    salary: string | null;
    team: string | null;
    category: string | null;
  }

  let activeFilters: Filters = {
    salary: null,
    team: null,
    category: null
  };

  function filterJobs() {
    const jobItems = document.querySelectorAll<HTMLElement>('.job-item');

    jobItems.forEach(item => {
      const team = item.dataset.team || '';
      const category = item.dataset.category || '';
      const salary = parseInt(item.dataset.salary || '0');

      const matchesTeam = !activeFilters.team || team === activeFilters.team;
      const matchesCategory = !activeFilters.category || category === activeFilters.category;

      item.style.display = (matchesTeam && matchesCategory) ? '' : 'none';

      // Handle salary sorting
      if (activeFilters.salary) {
        const jobList = document.querySelector<HTMLElement>('.job-list');
        if (!jobList) return;

        const items = Array.from(jobList.children) as HTMLElement[];
        items.sort((a, b) => {
          const salaryA = parseInt(a.dataset.salary || '0');
          const salaryB = parseInt(b.dataset.salary || '0');
          return activeFilters.salary === 'high-low' ? salaryB - salaryA : salaryA - salaryB;
        });

        items.forEach(item => jobList.appendChild(item));
      }
    });
  }

  // Event Listeners
  const radioGroups = ['salary-sort', 'team-filter', 'category-filter'];
  
  radioGroups.forEach(group => {
    document.querySelectorAll<HTMLInputElement>(`input[name="${group}"]`).forEach(radio => {
      radio.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        const filterType = group.split('-')[0] as keyof Filters;
        activeFilters[filterType] = target.value;
        filterJobs();
      });
    });
  });

  document.getElementById('resetFilters')?.addEventListener('click', () => {
    activeFilters = { salary: null, team: null, category: null };
    document.querySelectorAll<HTMLInputElement>('input[type="radio"]')
      .forEach(radio => radio.checked = false);
    
    // Dispatch custom event for search reset
    document.dispatchEvent(new CustomEvent('resetSearch'));
    
    filterJobs();
  });
</script> 